(set .c1 (input :conclusion ((= a b))))
(set .c2 (input :conclusion ((= (g c) d))))
(set .c3 (input :conclusion ((= a d))))
(set .c4 (input :conclusion ((not (= (f a b) (f (g c) b))))))
(set .c5 (eq_congruent :conclusion ((not (= a (g c))) (not (= b b)) (= (f a b) (f (g c) b)))))
(set .c6 (eq_transitive :conclusion ((not (= a d)) (not (= (g c) d)) (= a (g c)))))
(set .c7 (th_resolution :clauses (.c5 .c6) :conclusion ((not (= b b)) (= (f a b) (f (g c) b)) (not (= a d)) (not (= (g c) d)))))
(set .c8 (eq_reflexive :conclusion ((= b b))))
(set .c9 (th_resolution :clauses (.c7 .c8) :conclusion ((= (f a b) (f (g c) b)) (not (= a d)) (not (= (g c) d)))))
(set .c10 (resolution :clauses (.c9 .c2 .c3 .c4) :conclusion ()))
