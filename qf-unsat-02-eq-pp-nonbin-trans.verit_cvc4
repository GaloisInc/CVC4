(set .c0 (input :conclusion ((= (g c) d))))
(set .c1 (input :conclusion ((= a d))))
(set .c2 (input :conclusion ((not (= (f a b) (f (g c) b))))))
(set .c3 (input :conclusion (true)))
(set .c4 (preprocessing_rewrite :clauses (.c0) :conclusion ((= d (g c)))))
(set .c5 (congruence :conclusion ((= a (g c)) (= b b) (= (f a b) (f (g c) b)))))
(set .c6 (transitivity :conclusion ((= d (g c)) (= a d) (= a (g c)))))
(set .c7 (resolution :clauses (.c6 .c5) :conclusion ((= d (g c)) (= a d) (= b b) (= (f a b) (f (g c) b)))))
(set .c8 (reflexivity :conclusion ((= b b))))
(set .c9 (resolution :clauses (.c8 .c7) :conclusion ((= d (g c)) (= a d) (= (f a b) (f (g c) b)))))
(set .c10 (resolution :clauses (.c9 .c2 .c1 .c4) :conclusion ()))
