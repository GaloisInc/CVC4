(set-option :incremental false)
(set-logic ALL)
(declare-sort $$unsorted 0)
(declare-sort qML_mu 0)
(declare-sort qML_i 0)
(declare-fun scott_G (qML_mu qML_i) Bool)
(declare-fun scott_NE_QML_mu (qML_mu qML_i) Bool)
(declare-fun scott_P ((-> qML_mu qML_i Bool) qML_i) Bool)
(declare-fun scott_ess_QML_mu ((-> qML_mu qML_i Bool) qML_mu qML_i) Bool)
(assert (= scott_G (lambda ((X qML_mu) (__flatten_var_0 qML_i)) ((lambda ((W qML_i)) (forall ((Y (-> qML_mu qML_i Bool))) (=> (scott_P Y W) (Y X W)) )) __flatten_var_0))))
(assert (forall ((W2 qML_i) (V qML_i)) (exists ((X2 qML_mu)) (scott_G X2 V) ) ))
(assert (forall ((W2 qML_i) (X3 (-> qML_mu qML_i Bool))) (=> (scott_P X3 W2) (forall ((X_1 qML_i)) (scott_P X3 X_1) )) ))
(assert (forall ((X_1 qML_i)) (scott_P scott_G X_1) ))
(assert (= scott_ess_QML_mu (lambda ((Phi (-> qML_mu qML_i Bool)) (__flatten_var_0 qML_mu) (__flatten_var_1 qML_i)) ((lambda ((X qML_mu) (__flatten_var_0 qML_i)) ((lambda ((W qML_i)) (and (Phi X W) (forall ((Y (-> qML_mu qML_i Bool))) (=> (Y X W) (forall ((V2 qML_i)) (forall ((Z qML_mu)) (=> (Phi Z V2) (Y Z V2)) ) )) ))) __flatten_var_0)) __flatten_var_0 __flatten_var_1))))
(assert (forall ((W2 qML_i) (X3 (-> qML_mu qML_i Bool))) (=> (not (scott_P X3 W2)) (scott_P (lambda ((Y qML_mu) (__flatten_var_0 qML_i)) ((lambda ((Z qML_i)) (not (X3 Y Z))) __flatten_var_0)) W2)) ))
(assert (forall ((W2 qML_i) (X3 (-> qML_mu qML_i Bool)) (Xa (-> qML_mu qML_i Bool))) (=> (and (scott_P X3 W2) (forall ((V3 qML_i) (Xb qML_mu)) (=> (X3 Xb V3) (Xa Xb V3)) )) (scott_P Xa W2)) ))
(assert (forall ((X_1 qML_i)) (scott_P scott_NE_QML_mu X_1) ))
(assert (forall ((W2 qML_i) (X3 (-> qML_mu qML_i Bool))) (=> (scott_P (lambda ((Y qML_mu) (__flatten_var_0 qML_i)) ((lambda ((Z qML_i)) (not (X3 Y Z))) __flatten_var_0)) W2) (not (scott_P X3 W2))) ))
(assert (= scott_NE_QML_mu (lambda ((X qML_mu) (__flatten_var_0 qML_i)) ((lambda ((W qML_i)) (forall ((Y (-> qML_mu qML_i Bool))) (=> (scott_ess_QML_mu Y X W) (forall ((V2 qML_i)) (exists ((Z qML_mu)) (Y Z V2) ) )) )) __flatten_var_0))))
(assert (not (forall ((W3 qML_i) (X2 qML_mu)) (or (not (scott_G X2 W3)) (scott_ess_QML_mu scott_G X2 W3)) )))
(meta-info :filename "PHI004^4")
(check-sat-assuming ( (not false) ))
