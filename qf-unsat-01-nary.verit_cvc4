(set .c0 (input :conclusion ((= f1 f2))))
(set .c1 (input :conclusion ((=> (p f1) (=> (or (= f1 f2) (distinct f3 f4 f2)) (p f3))))))
(set .c2 (input :conclusion ((p f1))))
(set .c3 (input :conclusion ((not (p f3)))))
(set .c4 (input :conclusion (true)))
(set .c5 (preprocessing_rewrite :clauses (.c1) :conclusion ((=> (p f1) (=> (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3))))))
; (set .c6 (cnf_and_pos :conclusion ((not (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (= f3 f4))))
; (set .c7 (cnf_and_pos :conclusion ((not (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (= f2 f3))))
; (set .c8 (cnf_and_pos :conclusion ((not (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (= f2 f4))))
(set .c9 (cnf_and_neg :conclusion ((and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4))) (= f3 f4) (= f2 f3) (= f2 f4))))
(set .c10 (cnf_or_neg :conclusion ((or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (not (= f1 f2)))))
(set .c11 (cnf_implies_pos :conclusion ((not (=> (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3))) (not (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4))))) (p f3))))
(set .c12 (cnf_implies_neg2 :conclusion ((=> (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3)) (not (p f3)))))
(set .c13 (cnf_implies :clauses (.c5) :conclusion ((not (p f1)) (=> (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3)))))
(set .c14 (resolution :clauses (.c13 .c2) :conclusion ((=> (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3)))))
(set .c15 (resolution :clauses (.c10 .c0) :conclusion ((or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))))))
(set .c16 (resolution :clauses (.c11 .c14 .c15) :conclusion ((p f3))))
(set .c17 (resolution :clauses (.c3 .c16) :conclusion ()))