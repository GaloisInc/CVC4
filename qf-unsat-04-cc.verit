(set .c1 (input :conclusion ((= a b))))
(set .c2 (input :conclusion ((= b c))))
(set .c3 (input :conclusion ((not (= (k (f a) (g a) (h a)) (k (f b) (g b) (h c)))))))
(set .c4 (eq_congruent :conclusion ((not (= (f a) (f b))) (not (= (g a) (g b))) (not (= (h a) (h c))) (= (k (f a) (g a) (h a)) (k (f b) (g b) (h c))))))
(set .c5 (eq_congruent :conclusion ((not (= a b)) (= (f a) (f b)))))
(set .c6 (th_resolution :clauses (.c4 .c5) :conclusion ((not (= (g a) (g b))) (not (= (h a) (h c))) (= (k (f a) (g a) (h a)) (k (f b) (g b) (h c))) (not (= a b)))))
(set .c7 (eq_congruent :conclusion ((not (= a b)) (= (g a) (g b)))))
(set .c8 (th_resolution :clauses (.c6 .c7) :conclusion ((not (= (h a) (h c))) (= (k (f a) (g a) (h a)) (k (f b) (g b) (h c))) (not (= a b)))))
(set .c9 (eq_congruent :conclusion ((not (= a c)) (= (h a) (h c)))))
(set .c10 (eq_transitive :conclusion ((not (= a b)) (not (= b c)) (= a c))))
(set .c11 (th_resolution :clauses (.c9 .c10) :conclusion ((= (h a) (h c)) (not (= a b)) (not (= b c)))))
(set .c12 (th_resolution :clauses (.c8 .c11) :conclusion ((= (k (f a) (g a) (h a)) (k (f b) (g b) (h c))) (not (= a b)) (not (= b c)))))
(set .c13 (resolution :clauses (.c12 .c1 .c2 .c3) :conclusion ()))