(set-logic AUFLIA)
(set-info :status unsat)
(declare-sort Com$ 0)
(declare-sort Pname$ 0)
(declare-sort State$ 0)
(declare-sort Pname_set$ 0)
(declare-sort Com_option$ 0)
(declare-sort State_triple$ 0)
(declare-sort State_triple_set$ 0)
(declare-fun g$ () State_triple_set$)
(declare-fun uu$ (State$ State$) Bool)
(declare-fun bot$ () State_triple_set$)
(declare-fun dom$ ((-> Pname$ Com_option$)) Pname_set$)
(declare-fun mgt$ (Com$) State_triple$)
(declare-fun the$ (Com_option$) Com$)
(declare-fun uua$ (State_triple_set$ State_triple$) Bool)
(declare-fun uub$ (Pname_set$ Pname$) Bool)
(declare-fun body$ () (-> Pname$ Com_option$))
(declare-fun bot$a () Pname_set$)
(declare-fun bot$b (State_triple$) Bool)
(declare-fun bot$c () Bool)
(declare-fun bot$d (Pname$) Bool)
(declare-fun less$ (Pname_set$ Pname_set$) Bool)
(declare-fun semi$ (Com$ Com$) Com$)
(declare-fun skip$ () Com$)
(declare-fun body$a (Pname$) Com$)
(declare-fun evalc$ (Com$) (-> State$ (-> State$ Bool)))
(declare-fun less$a (State_triple_set$ State_triple_set$) Bool)
(declare-fun minus$ (Pname_set$ Pname_set$) Pname_set$)
(declare-fun finite$ (Pname_set$) Bool)
(declare-fun insert$ (State_triple$ State_triple_set$) State_triple_set$)
(declare-fun member$ (State_triple$ State_triple_set$) Bool)
(declare-fun minus$a (State_triple_set$ State_triple_set$) State_triple_set$)
(declare-fun remove$ (State_triple$ State_triple_set$) State_triple_set$)
(declare-fun triple$ ((-> State$ (-> State$ Bool)) Com$ (-> State$ (-> State$ Bool))) State_triple$)
(declare-fun uminus$ (Pname_set$) Pname_set$)
(declare-fun collect$ ((-> Pname$ Bool)) Pname_set$)
(declare-fun finite$a (State_triple_set$) Bool)
(declare-fun insert$a (Pname$ Pname_set$) Pname_set$)
(declare-fun less_eq$ (Pname_set$ Pname_set$) Bool)
(declare-fun member$a (Pname$ Pname_set$) Bool)
(declare-fun remove$a (Pname$ Pname_set$) Pname_set$)
(declare-fun uminus$a (State_triple_set$) State_triple_set$)
(declare-fun collect$a ((-> State_triple$ Bool)) State_triple_set$)
(declare-fun greatest$ ((-> State_triple_set$ Bool)) State_triple_set$)
(declare-fun is_empty$ (Pname_set$) Bool)
(declare-fun less_eq$a (State_triple_set$ State_triple_set$) Bool)
(declare-fun less_eq$b ((-> State_triple$ Bool) (-> State_triple$ Bool)) Bool)
(declare-fun less_eq$c ((-> Pname$ Bool) (-> Pname$ Bool)) Bool)
(declare-fun pairwise$ ((-> Pname$ (-> Pname$ Bool)) Pname_set$) Bool)
(declare-fun the_elem$ (Pname_set$) Pname$)
(declare-fun greatest$a ((-> Pname_set$ Bool)) Pname_set$)
(declare-fun is_empty$a (State_triple_set$) Bool)
(declare-fun pairwise$a ((-> State_triple$ (-> State_triple$ Bool)) State_triple_set$) Bool)
(declare-fun the_elem$a (State_triple_set$) State_triple$)
(declare-fun hoare_derivs$ (State_triple_set$ State_triple_set$) Bool)
(declare-fun hoare_valids$ (State_triple_set$ State_triple_set$) Bool)
(declare-fun is_singleton$ (Pname_set$) Bool)
(declare-fun is_singleton$a (State_triple_set$) Bool)
(declare-fun state_not_singleton$ () Bool)
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (! (= (uua$ ?v0 ?v1) (member$ ?v1 ?v0)) :pattern ((uua$ ?v0 ?v1)))) :named a0))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (! (= (uub$ ?v0 ?v1) (member$a ?v1 ?v0)) :pattern ((uub$ ?v0 ?v1)))) :named a1))
(assert (! (forall ((?v0 State$) (?v1 State$)) (! (= (uu$ ?v0 ?v1) (= ?v0 ?v1)) :pattern ((uu$ ?v0 ?v1)))) :named a2))
(assert (! (not (hoare_derivs$ g$ (insert$ (triple$ uu$ skip$ (evalc$ skip$)) bot$))) :named a3))
(assert (! state_not_singleton$ :named a4))
(assert (! (forall ((?v0 Pname$)) (=> (member$a ?v0 (dom$ body$)) (hoare_derivs$ g$ (insert$ (triple$ uu$ (body$a ?v0) (evalc$ (body$a ?v0))) bot$)))) :named a5))
(assert (! (forall ((?v0 (-> State$ (-> State$ Bool))) (?v1 Com$) (?v2 (-> State$ (-> State$ Bool))) (?v3 (-> State$ (-> State$ Bool))) (?v4 Com$) (?v5 (-> State$ (-> State$ Bool)))) (= (= (triple$ ?v0 ?v1 ?v2) (triple$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a6))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State$ (-> State$ Bool))) (?v2 Com$) (?v3 (-> State$ (-> State$ Bool))) (?v4 (-> State$ (-> State$ Bool)))) (=> (and (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 ?v2 ?v3) bot$)) (forall ((?v5 State$) (?v6 State$)) (=> (?v4 ?v5 ?v6) (?v1 ?v5 ?v6)))) (hoare_derivs$ ?v0 (insert$ (triple$ ?v4 ?v2 ?v3) bot$)))) :named a7))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State$ (-> State$ Bool))) (?v2 Com$) (?v3 (-> State$ (-> State$ Bool))) (?v4 (-> State$ (-> State$ Bool)))) (=> (and (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 ?v2 ?v3) bot$)) (forall ((?v5 State$) (?v6 State$)) (=> (?v3 ?v5 ?v6) (?v4 ?v5 ?v6)))) (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 ?v2 ?v4) bot$)))) :named a8))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State$ (-> State$ Bool))) (?v2 Com$) (?v3 (-> State$ (-> State$ Bool))) (?v4 (-> State$ (-> State$ Bool))) (?v5 (-> State$ (-> State$ Bool)))) (=> (and (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 ?v2 ?v3) bot$)) (forall ((?v6 State$) (?v7 State$)) (=> (?v4 ?v6 ?v7) (forall ((?v8 State$)) (=> (forall ((?v9 State$)) (=> (?v1 ?v9 ?v7) (?v3 ?v9 ?v8))) (?v5 ?v6 ?v8)))))) (hoare_derivs$ ?v0 (insert$ (triple$ ?v4 ?v2 ?v5) bot$)))) :named a9))
(assert (! (=> state_not_singleton$ (forall ((?v0 State$)) (=> (forall ((?v1 State$)) (= ?v1 ?v0)) false))) :named a10))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (=> (hoare_derivs$ ?v0 (insert$ ?v1 ?v2)) (and (hoare_derivs$ ?v0 (insert$ ?v1 bot$)) (hoare_derivs$ ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 State_triple$)) (=> (forall ((?v1 (-> State$ (-> State$ Bool))) (?v2 Com$) (?v3 (-> State$ (-> State$ Bool)))) (=> (= ?v0 (triple$ ?v1 ?v2 ?v3)) false)) false)) :named a12))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (hoare_derivs$ ?v0 ?v1) (hoare_derivs$ ?v2 ?v0)) (hoare_derivs$ ?v2 ?v1))) :named a13))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State$ (-> State$ Bool)))) (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 skip$ ?v1) bot$))) :named a14))
(assert (! (forall ((?v0 State_triple_set$)) (hoare_derivs$ ?v0 bot$)) :named a15))
(assert (! (forall ((?v0 (-> State$ (-> State$ Bool))) (?v1 State_triple_set$) (?v2 Com$) (?v3 (-> State$ (-> State$ Bool)))) (=> (forall ((?v4 State$) (?v5 State$)) (=> (?v0 ?v4 ?v5) (exists ((?v6 (-> State$ (-> State$ Bool))) (?v7 (-> State$ (-> State$ Bool)))) (and (hoare_derivs$ ?v1 (insert$ (triple$ ?v6 ?v2 ?v7) bot$)) (forall ((?v8 State$)) (=> (forall ((?v9 State$)) (=> (?v6 ?v9 ?v5) (?v7 ?v9 ?v8))) (?v3 ?v4 ?v8))))))) (hoare_derivs$ ?v1 (insert$ (triple$ ?v0 ?v2 ?v3) bot$)))) :named a16))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (=> (and (hoare_derivs$ ?v0 (insert$ ?v1 bot$)) (hoare_derivs$ ?v0 ?v2)) (hoare_derivs$ ?v0 (insert$ ?v1 ?v2)))) :named a17))
(assert (! (= state_not_singleton$ (exists ((?v0 State$) (?v1 State$)) (not (= ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 Pname$)) (member$a ?v0 (insert$a ?v0 bot$a))) :named a19))
(assert (! (forall ((?v0 State_triple$)) (member$ ?v0 (insert$ ?v0 bot$))) :named a20))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$)) (= (= (body$a ?v0) (body$a ?v1)) (= ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a22))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname$)) (=> (=> (not (member$a ?v0 ?v1)) (= ?v0 ?v2)) (member$a ?v0 (insert$a ?v2 ?v1)))) :named a23))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (member$ ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a24))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$) (?v2 Pname_set$)) (= (member$a ?v0 (insert$a ?v1 ?v2)) (or (= ?v0 ?v1) (member$a ?v0 ?v2)))) :named a25))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (= (insert$a ?v0 (insert$a ?v0 ?v1)) (insert$a ?v0 ?v1))) :named a26))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a27))
(assert (! (forall ((?v0 Pname$)) (= (member$a ?v0 bot$a) false)) :named a28))
(assert (! (forall ((?v0 State_triple$)) (= (member$ ?v0 bot$) false)) :named a29))
(assert (! (forall ((?v0 Pname_set$)) (= (forall ((?v1 Pname$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$a))) :named a30))
(assert (! (forall ((?v0 State_triple_set$)) (= (forall ((?v1 State_triple$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a31))
(assert (! (forall ((?v0 (-> Pname$ Bool))) (= (= (collect$ ?v0) bot$a) (forall ((?v1 Pname$)) (not (?v0 ?v1))))) :named a32))
(assert (! (forall ((?v0 (-> State_triple$ Bool))) (= (= (collect$a ?v0) bot$) (forall ((?v1 State_triple$)) (not (?v0 ?v1))))) :named a33))
(assert (! (forall ((?v0 (-> Pname$ Bool))) (= (= bot$a (collect$ ?v0)) (forall ((?v1 Pname$)) (not (?v0 ?v1))))) :named a34))
(assert (! (forall ((?v0 (-> State_triple$ Bool))) (= (= bot$ (collect$a ?v0)) (forall ((?v1 State_triple$)) (not (?v0 ?v1))))) :named a35))
(assert (! (forall ((?v0 State_triple$)) (! (= (bot$b ?v0) bot$c) :pattern ((bot$b ?v0)))) :named a36))
(assert (! (forall ((?v0 Pname$)) (! (= (bot$d ?v0) bot$c) :pattern ((bot$d ?v0)))) :named a37))
(assert (! (forall ((?v0 Pname$)) (not (= skip$ (body$a ?v0)))) :named a38))
(assert (! (forall ((?v0 State$) (?v1 State$)) (=> (and (evalc$ skip$ ?v0 ?v1) (=> (= ?v1 ?v0) false)) false)) :named a39))
(assert (! (= bot$a (collect$ bot$d)) :named a40))
(assert (! (= bot$ (collect$a bot$b)) :named a41))
(assert (! (forall ((?v0 State_triple$)) (! (= (bot$b ?v0) bot$c) :pattern ((bot$b ?v0)))) :named a42))
(assert (! (forall ((?v0 Pname$)) (! (= (bot$d ?v0) bot$c) :pattern ((bot$d ?v0)))) :named a43))
(assert (! (forall ((?v0 Pname_set$)) (= (exists ((?v1 Pname$)) (member$a ?v1 ?v0)) (not (= ?v0 bot$a)))) :named a44))
(assert (! (forall ((?v0 State_triple_set$)) (= (exists ((?v1 State_triple$)) (member$ ?v1 ?v0)) (not (= ?v0 bot$)))) :named a45))
(assert (! (forall ((?v0 Pname_set$)) (=> (forall ((?v1 Pname$)) (=> (member$a ?v1 ?v0) false)) (= ?v0 bot$a))) :named a46))
(assert (! (forall ((?v0 State_triple_set$)) (=> (forall ((?v1 State_triple$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a47))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (=> (= ?v0 bot$a) (not (member$a ?v1 ?v0)))) :named a48))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a49))
(assert (! (forall ((?v0 Pname$)) (=> (member$a ?v0 bot$a) false)) :named a50))
(assert (! (forall ((?v0 State_triple$)) (=> (member$ ?v0 bot$) false)) :named a51))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (=> (member$ ?v0 ?v1) (exists ((?v2 State_triple_set$)) (and (= ?v1 (insert$ ?v0 ?v2)) (not (member$ ?v0 ?v2)))))) :named a52))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (=> (member$a ?v0 ?v1) (exists ((?v2 Pname_set$)) (and (= ?v1 (insert$a ?v0 ?v2)) (not (member$a ?v0 ?v2)))))) :named a53))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$) (?v2 Pname_set$)) (= (insert$a ?v0 (insert$a ?v1 ?v2)) (insert$a ?v1 (insert$a ?v0 ?v2)))) :named a54))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (insert$ ?v0 (insert$ ?v1 ?v2)) (insert$ ?v1 (insert$ ?v0 ?v2)))) :named a55))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple$) (?v3 State_triple_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v2 ?v3))) (= (= (insert$ ?v0 ?v1) (insert$ ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 State_triple_set$)) (and (= ?v1 (insert$ ?v2 ?v4)) (and (not (member$ ?v2 ?v4)) (and (= ?v3 (insert$ ?v0 ?v4)) (not (member$ ?v0 ?v4)))))))))) :named a56))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname$) (?v3 Pname_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v2 ?v3))) (= (= (insert$a ?v0 ?v1) (insert$a ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 Pname_set$)) (and (= ?v1 (insert$a ?v2 ?v4)) (and (not (member$a ?v2 ?v4)) (and (= ?v3 (insert$a ?v0 ?v4)) (not (member$a ?v0 ?v4)))))))))) :named a57))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (! (=> (member$ ?v0 ?v1) (= (insert$ ?v0 ?v1) ?v1)) :pattern ((insert$ ?v0 ?v1)))) :named a58))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (! (=> (member$a ?v0 ?v1) (= (insert$a ?v0 ?v1) ?v1)) :pattern ((insert$a ?v0 ?v1)))) :named a59))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v0 ?v2))) (= (= (insert$ ?v0 ?v1) (insert$ ?v0 ?v2)) (= ?v1 ?v2)))) :named a60))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v0 ?v2))) (= (= (insert$a ?v0 ?v1) (insert$a ?v0 ?v2)) (= ?v1 ?v2)))) :named a61))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v2 State_triple_set$)) (=> (and (= ?v1 (insert$ ?v0 ?v2)) (not (member$ ?v0 ?v2))) false))) false)) :named a62))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (=> (and (member$a ?v0 ?v1) (forall ((?v2 Pname_set$)) (=> (and (= ?v1 (insert$a ?v0 ?v2)) (not (member$a ?v0 ?v2))) false))) false)) :named a63))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a64))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (insert$a ?v2 ?v1)))) :named a65))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (member$ ?v0 (insert$ ?v0 ?v1))) :named a66))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (member$a ?v0 (insert$a ?v0 ?v1))) :named a67))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$) (?v2 State_triple_set$)) (=> (and (member$ ?v0 (insert$ ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false)) :named a68))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$) (?v2 Pname_set$)) (=> (and (member$a ?v0 (insert$a ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false)) :named a69))
(assert (! (forall ((?v0 Com$) (?v1 State$) (?v2 State$) (?v3 State$)) (=> (and (evalc$ ?v0 ?v1 ?v2) (evalc$ ?v0 ?v1 ?v3)) (= ?v3 ?v2))) :named a70))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$)) (=> (= (insert$a ?v0 bot$a) (insert$a ?v1 bot$a)) (= ?v0 ?v1))) :named a71))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$)) (=> (= (insert$ ?v0 bot$) (insert$ ?v1 bot$)) (= ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (not (= (insert$a ?v0 ?v1) bot$a))) :named a73))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (not (= (insert$ ?v0 ?v1) bot$))) :named a74))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$) (?v2 Pname$) (?v3 Pname$)) (= (= (insert$a ?v0 (insert$a ?v1 bot$a)) (insert$a ?v2 (insert$a ?v3 bot$a))) (or (and (= ?v0 ?v2) (= ?v1 ?v3)) (and (= ?v0 ?v3) (= ?v1 ?v2))))) :named a75))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$) (?v2 State_triple$) (?v3 State_triple$)) (= (= (insert$ ?v0 (insert$ ?v1 bot$)) (insert$ ?v2 (insert$ ?v3 bot$))) (or (and (= ?v0 ?v2) (= ?v1 ?v3)) (and (= ?v0 ?v3) (= ?v1 ?v2))))) :named a76))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$)) (= (member$a ?v0 (insert$a ?v1 bot$a)) (= ?v0 ?v1))) :named a77))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$)) (= (member$ ?v0 (insert$ ?v1 bot$)) (= ?v0 ?v1))) :named a78))
(assert (! (forall ((?v0 State_triple$) (?v1 (-> State_triple$ Bool))) (= (member$ ?v0 (collect$a ?v1)) (?v1 ?v0))) :named a79))
(assert (! (forall ((?v0 Pname$) (?v1 (-> Pname$ Bool))) (= (member$a ?v0 (collect$ ?v1)) (?v1 ?v0))) :named a80))
(assert (! (forall ((?v0 State_triple_set$)) (= (collect$a (uua$ ?v0)) ?v0)) :named a81))
(assert (! (forall ((?v0 Pname_set$)) (= (collect$ (uub$ ?v0)) ?v0)) :named a82))
(assert (! (forall ((?v0 (-> State_triple$ Bool)) (?v1 (-> State_triple$ Bool))) (=> (forall ((?v2 State_triple$)) (= (?v0 ?v2) (?v1 ?v2))) (= (collect$a ?v0) (collect$a ?v1)))) :named a83))
(assert (! (forall ((?v0 (-> Pname$ Bool)) (?v1 (-> Pname$ Bool))) (=> (forall ((?v2 Pname$)) (= (?v0 ?v2) (?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a84))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$)) (=> (member$a ?v0 (insert$a ?v1 bot$a)) (= ?v0 ?v1))) :named a85))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$)) (=> (member$ ?v0 (insert$ ?v1 bot$)) (= ?v0 ?v1))) :named a86))
(assert (! (forall ((?v0 State$)) (evalc$ skip$ ?v0 ?v0)) :named a87))
(assert (! (forall ((?v0 Pname$)) (= (the_elem$ (insert$a ?v0 bot$a)) ?v0)) :named a88))
(assert (! (forall ((?v0 State_triple$)) (= (the_elem$a (insert$ ?v0 bot$)) ?v0)) :named a89))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State$ (-> State$ Bool))) (?v2 Pname$) (?v3 (-> State$ (-> State$ Bool)))) (=> (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 (the$ (body$ ?v2)) ?v3) bot$)) (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 (body$a ?v2) ?v3) bot$)))) :named a90))
(assert (! (forall ((?v0 (-> State$ (-> State$ Bool))) (?v1 Pname$) (?v2 (-> State$ (-> State$ Bool))) (?v3 State_triple_set$)) (=> (hoare_derivs$ (insert$ (triple$ ?v0 (body$a ?v1) ?v2) ?v3) (insert$ (triple$ ?v0 (the$ (body$ ?v1)) ?v2) bot$)) (hoare_derivs$ ?v3 (insert$ (triple$ ?v0 (body$a ?v1) ?v2) bot$)))) :named a91))
(assert (! (forall ((?v0 Pname$)) (is_singleton$ (insert$a ?v0 bot$a))) :named a92))
(assert (! (forall ((?v0 State_triple$)) (is_singleton$a (insert$ ?v0 bot$))) :named a93))
(assert (! (forall ((?v0 Com$) (?v1 (-> State$ (-> State$ Bool))) (?v2 (-> State$ (-> State$ Bool)))) (=> (and (hoare_derivs$ bot$ (insert$ (mgt$ ?v0) bot$)) (hoare_valids$ bot$ (insert$ (triple$ ?v1 ?v0 ?v2) bot$))) (hoare_derivs$ bot$ (insert$ (triple$ ?v1 ?v0 ?v2) bot$)))) :named a94))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State$ (-> State$ Bool))) (?v2 Com$) (?v3 (-> State$ (-> State$ Bool))) (?v4 Com$) (?v5 (-> State$ (-> State$ Bool)))) (=> (and (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 ?v2 ?v3) bot$)) (hoare_derivs$ ?v0 (insert$ (triple$ ?v3 ?v4 ?v5) bot$))) (hoare_derivs$ ?v0 (insert$ (triple$ ?v1 (semi$ ?v2 ?v4) ?v5) bot$)))) :named a95))
(assert (! (forall ((?v0 Pname_set$)) (! (= (is_empty$ ?v0) (= ?v0 bot$a)) :pattern ((is_empty$ ?v0)))) :named a96))
(assert (! (forall ((?v0 State_triple_set$)) (! (= (is_empty$a ?v0) (= ?v0 bot$)) :pattern ((is_empty$a ?v0)))) :named a97))
(assert (! (forall ((?v0 Pname_set$)) (= (is_singleton$ ?v0) (exists ((?v1 Pname$)) (= ?v0 (insert$a ?v1 bot$a))))) :named a98))
(assert (! (forall ((?v0 State_triple_set$)) (= (is_singleton$a ?v0) (exists ((?v1 State_triple$)) (= ?v0 (insert$ ?v1 bot$))))) :named a99))
(assert (! (forall ((?v0 Pname_set$)) (=> (and (is_singleton$ ?v0) (forall ((?v1 Pname$)) (=> (= ?v0 (insert$a ?v1 bot$a)) false))) false)) :named a100))
(assert (! (forall ((?v0 State_triple_set$)) (=> (and (is_singleton$a ?v0) (forall ((?v1 State_triple$)) (=> (= ?v0 (insert$ ?v1 bot$)) false))) false)) :named a101))
(assert (! (finite$ (dom$ body$)) :named a102))
(assert (! (forall ((?v0 Com$) (?v1 Com$) (?v2 Com$) (?v3 Com$)) (= (= (semi$ ?v0 ?v1) (semi$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a103))
(assert (! (forall ((?v0 Com$) (?v1 Com$) (?v2 State$) (?v3 State$)) (=> (and (evalc$ (semi$ ?v0 ?v1) ?v2 ?v3) (forall ((?v4 State$)) (=> (and (evalc$ ?v0 ?v2 ?v4) (evalc$ ?v1 ?v4 ?v3)) false))) false)) :named a104))
(assert (! (forall ((?v0 Com$) (?v1 State$) (?v2 State$) (?v3 Com$) (?v4 State$)) (=> (and (evalc$ ?v0 ?v1 ?v2) (evalc$ ?v3 ?v2 ?v4)) (evalc$ (semi$ ?v0 ?v3) ?v1 ?v4))) :named a105))
(assert (! (forall ((?v0 Com$) (?v1 Com$) (?v2 Pname$)) (not (= (semi$ ?v0 ?v1) (body$a ?v2)))) :named a106))
(assert (! (forall ((?v0 Com$) (?v1 Com$)) (not (= skip$ (semi$ ?v0 ?v1)))) :named a107))
(assert (! (forall ((?v0 Pname_set$)) (! (= (is_singleton$ ?v0) (= ?v0 (insert$a (the_elem$ ?v0) bot$a))) :pattern ((is_singleton$ ?v0)))) :named a108))
(assert (! (forall ((?v0 State_triple_set$)) (! (= (is_singleton$a ?v0) (= ?v0 (insert$ (the_elem$a ?v0) bot$))) :pattern ((is_singleton$a ?v0)))) :named a109))
(assert (! (forall ((?v0 Pname_set$)) (=> (and (not (= ?v0 bot$a)) (forall ((?v1 Pname$) (?v2 Pname$)) (=> (and (member$a ?v1 ?v0) (member$a ?v2 ?v0)) (= ?v1 ?v2)))) (is_singleton$ ?v0))) :named a110))
(assert (! (forall ((?v0 State_triple_set$)) (=> (and (not (= ?v0 bot$)) (forall ((?v1 State_triple$) (?v2 State_triple$)) (=> (and (member$ ?v1 ?v0) (member$ ?v2 ?v0)) (= ?v1 ?v2)))) (is_singleton$a ?v0))) :named a111))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (hoare_derivs$ ?v0 ?v1) (hoare_valids$ ?v0 ?v1))) :named a112))
(assert (! (forall ((?v0 Pname$) (?v1 State$) (?v2 State$)) (=> (and (evalc$ (body$a ?v0) ?v1 ?v2) (=> (evalc$ (the$ (body$ ?v0)) ?v1 ?v2) false)) false)) :named a113))
(assert (! (forall ((?v0 Pname$) (?v1 State$) (?v2 State$)) (=> (evalc$ (the$ (body$ ?v0)) ?v1 ?v2) (evalc$ (body$a ?v0) ?v1 ?v2))) :named a114))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (= (finite$a (insert$ ?v0 ?v1)) (finite$a ?v1))) :named a115))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (= (finite$ (insert$a ?v0 ?v1)) (finite$ ?v1))) :named a116))
(assert (! (forall ((?v0 Pname_set$)) (=> (and (finite$ ?v0) (and (=> (= ?v0 bot$a) false) (forall ((?v1 Pname_set$) (?v2 Pname$)) (=> (and (= ?v0 (insert$a ?v2 ?v1)) (finite$ ?v1)) false)))) false)) :named a117))
(assert (! (forall ((?v0 State_triple_set$)) (=> (and (finite$a ?v0) (and (=> (= ?v0 bot$) false) (forall ((?v1 State_triple_set$) (?v2 State_triple$)) (=> (and (= ?v0 (insert$ ?v2 ?v1)) (finite$a ?v1)) false)))) false)) :named a118))
(assert (! (forall ((?v0 Pname_set$)) (= (finite$ ?v0) (or (= ?v0 bot$a) (exists ((?v1 Pname_set$) (?v2 Pname$)) (and (= ?v0 (insert$a ?v2 ?v1)) (finite$ ?v1)))))) :named a119))
(assert (! (forall ((?v0 State_triple_set$)) (= (finite$a ?v0) (or (= ?v0 bot$) (exists ((?v1 State_triple_set$) (?v2 State_triple$)) (and (= ?v0 (insert$ ?v2 ?v1)) (finite$a ?v1)))))) :named a120))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> Pname_set$ Bool))) (=> (and (finite$ ?v0) (and (?v1 bot$a) (forall ((?v2 Pname$) (?v3 Pname_set$)) (=> (and (finite$ ?v3) (and (not (member$a ?v2 ?v3)) (?v1 ?v3))) (?v1 (insert$a ?v2 ?v3)))))) (?v1 ?v0))) :named a121))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State_triple_set$ Bool))) (=> (and (finite$a ?v0) (and (?v1 bot$) (forall ((?v2 State_triple$) (?v3 State_triple_set$)) (=> (and (finite$a ?v3) (and (not (member$ ?v2 ?v3)) (?v1 ?v3))) (?v1 (insert$ ?v2 ?v3)))))) (?v1 ?v0))) :named a122))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> Pname_set$ Bool))) (=> (and (finite$ ?v0) (and (not (= ?v0 bot$a)) (and (forall ((?v2 Pname$)) (?v1 (insert$a ?v2 bot$a))) (forall ((?v2 Pname$) (?v3 Pname_set$)) (=> (and (finite$ ?v3) (and (not (= ?v3 bot$a)) (and (not (member$a ?v2 ?v3)) (?v1 ?v3)))) (?v1 (insert$a ?v2 ?v3))))))) (?v1 ?v0))) :named a123))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State_triple_set$ Bool))) (=> (and (finite$a ?v0) (and (not (= ?v0 bot$)) (and (forall ((?v2 State_triple$)) (?v1 (insert$ ?v2 bot$))) (forall ((?v2 State_triple$) (?v3 State_triple_set$)) (=> (and (finite$a ?v3) (and (not (= ?v3 bot$)) (and (not (member$ ?v2 ?v3)) (?v1 ?v3)))) (?v1 (insert$ ?v2 ?v3))))))) (?v1 ?v0))) :named a124))
(assert (! (forall ((?v0 (-> Pname_set$ Bool)) (?v1 Pname_set$)) (=> (and (forall ((?v2 Pname_set$)) (=> (not (finite$ ?v2)) (?v0 ?v2))) (and (?v0 bot$a) (forall ((?v2 Pname$) (?v3 Pname_set$)) (=> (and (finite$ ?v3) (and (not (member$a ?v2 ?v3)) (?v0 ?v3))) (?v0 (insert$a ?v2 ?v3)))))) (?v0 ?v1))) :named a125))
(assert (! (forall ((?v0 (-> State_triple_set$ Bool)) (?v1 State_triple_set$)) (=> (and (forall ((?v2 State_triple_set$)) (=> (not (finite$a ?v2)) (?v0 ?v2))) (and (?v0 bot$) (forall ((?v2 State_triple$) (?v3 State_triple_set$)) (=> (and (finite$a ?v3) (and (not (member$ ?v2 ?v3)) (?v0 ?v3))) (?v0 (insert$ ?v2 ?v3)))))) (?v0 ?v1))) :named a126))
(assert (! (forall ((?v0 Pname_set$)) (=> (not (finite$ ?v0)) (not (= ?v0 bot$a)))) :named a127))
(assert (! (forall ((?v0 State_triple_set$)) (=> (not (finite$a ?v0)) (not (= ?v0 bot$)))) :named a128))
(assert (! (finite$ bot$a) :named a129))
(assert (! (finite$a bot$) :named a130))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (=> (finite$a ?v0) (finite$a (insert$ ?v1 ?v0)))) :named a131))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (=> (finite$ ?v0) (finite$ (insert$a ?v1 ?v0)))) :named a132))
(assert (! (forall ((?v0 (-> Pname$ Bool))) (= (= (collect$ ?v0) bot$a) (= ?v0 bot$d))) :named a133))
(assert (! (forall ((?v0 (-> State_triple$ Bool))) (= (= (collect$a ?v0) bot$) (= ?v0 bot$b))) :named a134))
(assert (! (forall ((?v0 Pname$)) (! (= (bot$d ?v0) (member$a ?v0 bot$a)) :pattern ((bot$d ?v0)))) :named a135))
(assert (! (forall ((?v0 State_triple$)) (! (= (bot$b ?v0) (member$ ?v0 bot$)) :pattern ((bot$b ?v0)))) :named a136))
(assert (! (forall ((?v0 (-> Pname$ (-> Pname$ Bool))) (?v1 Pname$)) (pairwise$ ?v0 (insert$a ?v1 bot$a))) :named a137))
(assert (! (forall ((?v0 (-> State_triple$ (-> State_triple$ Bool))) (?v1 State_triple$)) (pairwise$a ?v0 (insert$ ?v1 bot$))) :named a138))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 (-> Pname_set$ Bool))) (=> (and (finite$ ?v0) (and (less_eq$ ?v0 ?v1) (and (?v2 bot$a) (forall ((?v3 Pname$) (?v4 Pname_set$)) (=> (and (finite$ ?v4) (and (member$a ?v3 ?v1) (and (less_eq$ ?v4 ?v1) (and (not (member$a ?v3 ?v4)) (?v2 ?v4))))) (?v2 (insert$a ?v3 ?v4))))))) (?v2 ?v0))) :named a139))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ Bool))) (=> (and (finite$a ?v0) (and (less_eq$a ?v0 ?v1) (and (?v2 bot$) (forall ((?v3 State_triple$) (?v4 State_triple_set$)) (=> (and (finite$a ?v4) (and (member$ ?v3 ?v1) (and (less_eq$a ?v4 ?v1) (and (not (member$ ?v3 ?v4)) (?v2 ?v4))))) (?v2 (insert$ ?v3 ?v4))))))) (?v2 ?v0))) :named a140))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 (-> Pname_set$ Bool))) (=> (and (finite$ ?v0) (and (less_eq$ ?v0 ?v1) (and (?v2 bot$a) (forall ((?v3 Pname$) (?v4 Pname_set$)) (=> (and (finite$ ?v4) (and (member$a ?v3 ?v1) (and (not (member$a ?v3 ?v4)) (?v2 ?v4)))) (?v2 (insert$a ?v3 ?v4))))))) (?v2 ?v0))) :named a141))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ Bool))) (=> (and (finite$a ?v0) (and (less_eq$a ?v0 ?v1) (and (?v2 bot$) (forall ((?v3 State_triple$) (?v4 State_triple_set$)) (=> (and (finite$a ?v4) (and (member$ ?v3 ?v1) (and (not (member$ ?v3 ?v4)) (?v2 ?v4)))) (?v2 (insert$ ?v3 ?v4))))))) (?v2 ?v0))) :named a142))
(assert (! (forall ((?v0 State_triple_set$)) (less_eq$a ?v0 ?v0)) :named a143))
(assert (! (forall ((?v0 Pname_set$)) (less_eq$ ?v0 ?v0)) :named a144))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (forall ((?v2 State_triple$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$a ?v0 ?v1))) :named a145))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (forall ((?v2 Pname$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a146))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a147))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a148))
(assert (! (forall ((?v0 Pname_set$)) (= (less_eq$ ?v0 bot$a) (= ?v0 bot$a))) :named a149))
(assert (! (forall ((?v0 State_triple_set$)) (= (less_eq$a ?v0 bot$) (= ?v0 bot$))) :named a150))
(assert (! (forall ((?v0 Pname_set$)) (less_eq$ bot$a ?v0)) :named a151))
(assert (! (forall ((?v0 State_triple_set$)) (less_eq$a bot$ ?v0)) :named a152))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (= (less_eq$a (insert$ ?v0 ?v1) ?v2) (and (member$ ?v0 ?v2) (less_eq$a ?v1 ?v2)))) :named a153))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (= (less_eq$ (insert$a ?v0 ?v1) ?v2) (and (member$a ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a154))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$) (?v2 Pname_set$)) (= (= (insert$a ?v0 bot$a) (insert$a ?v1 ?v2)) (and (= ?v1 ?v0) (less_eq$ ?v2 (insert$a ?v0 bot$a))))) :named a155))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (= (insert$ ?v0 bot$) (insert$ ?v1 ?v2)) (and (= ?v1 ?v0) (less_eq$a ?v2 (insert$ ?v0 bot$))))) :named a156))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname$)) (= (= (insert$a ?v0 ?v1) (insert$a ?v2 bot$a)) (and (= ?v0 ?v2) (less_eq$ ?v1 (insert$a ?v2 bot$a))))) :named a157))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple$)) (= (= (insert$ ?v0 ?v1) (insert$ ?v2 bot$)) (and (= ?v0 ?v2) (less_eq$a ?v1 (insert$ ?v2 bot$))))) :named a158))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (and (less_eq$a ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a159))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (and (less_eq$ ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a160))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (and (less_eq$a ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a161))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (and (less_eq$ ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a162))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (and (less_eq$a ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a163))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (and (less_eq$ ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a164))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (and (less_eq$a ?v0 ?v1) (and (=> (not (member$ ?v2 ?v0)) false) (=> (member$ ?v2 ?v1) false))) false)) :named a165))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (and (less_eq$ ?v0 ?v1) (and (=> (not (member$a ?v2 ?v0)) false) (=> (member$a ?v2 ?v1) false))) false)) :named a166))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) false)) false)) :named a167))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) false)) false)) :named a168))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 State_triple$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a169))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 Pname$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a170))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1))) :named a171))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a172))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v1 ?v0))) :named a173))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a174))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$a ?v1 ?v2)) (member$ ?v0 ?v2))) :named a175))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$a ?v0 ?v2))) :named a176))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 State_triple$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a177))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 Pname$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a178))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$a ?v1 ?v2)) (member$ ?v0 ?v2))) :named a179))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$a ?v0 ?v2))) :named a180))
(assert (! (forall ((?v0 State_triple_set$)) (less_eq$a ?v0 ?v0)) :named a181))
(assert (! (forall ((?v0 Pname_set$)) (less_eq$ ?v0 ?v0)) :named a182))
(assert (! (forall ((?v0 (-> State_triple$ Bool)) (?v1 (-> State_triple$ Bool))) (=> (forall ((?v2 State_triple$)) (=> (?v0 ?v2) (?v1 ?v2))) (less_eq$a (collect$a ?v0) (collect$a ?v1)))) :named a183))
(assert (! (forall ((?v0 (-> Pname$ Bool)) (?v1 (-> Pname$ Bool))) (=> (forall ((?v2 Pname$)) (=> (?v0 ?v2) (?v1 ?v2))) (less_eq$ (collect$ ?v0) (collect$ ?v1)))) :named a184))
(assert (! (forall ((?v0 (-> State_triple$ (-> State_triple$ Bool))) (?v1 State_triple_set$)) (= (pairwise$a ?v0 ?v1) (forall ((?v2 State_triple$)) (=> (member$ ?v2 ?v1) (forall ((?v3 State_triple$)) (=> (and (member$ ?v3 ?v1) (not (= ?v2 ?v3))) (?v0 ?v2 ?v3))))))) :named a185))
(assert (! (forall ((?v0 (-> Pname$ (-> Pname$ Bool))) (?v1 Pname_set$)) (= (pairwise$ ?v0 ?v1) (forall ((?v2 Pname$)) (=> (member$a ?v2 ?v1) (forall ((?v3 Pname$)) (=> (and (member$a ?v3 ?v1) (not (= ?v2 ?v3))) (?v0 ?v2 ?v3))))))) :named a186))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a187))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a188))
(assert (! (forall ((?v0 (-> State_triple$ (-> State_triple$ Bool))) (?v1 State_triple_set$) (?v2 (-> State_triple$ (-> State_triple$ Bool)))) (=> (and (pairwise$a ?v0 ?v1) (forall ((?v3 State_triple$) (?v4 State_triple$)) (=> (?v0 ?v3 ?v4) (?v2 ?v3 ?v4)))) (pairwise$a ?v2 ?v1))) :named a189))
(assert (! (forall ((?v0 (-> Pname$ (-> Pname$ Bool))) (?v1 Pname_set$) (?v2 (-> Pname$ (-> Pname$ Bool)))) (=> (and (pairwise$ ?v0 ?v1) (forall ((?v3 Pname$) (?v4 Pname$)) (=> (?v0 ?v3 ?v4) (?v2 ?v3 ?v4)))) (pairwise$ ?v2 ?v1))) :named a190))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a191))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a192))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (and (less_eq$a ?v0 ?v1) (not (member$ ?v2 ?v1))) (not (member$ ?v2 ?v0)))) :named a193))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (and (less_eq$ ?v0 ?v1) (not (member$a ?v2 ?v1))) (not (member$a ?v2 ?v0)))) :named a194))
(assert (! (forall ((?v0 (-> State_triple$ (-> State_triple$ Bool))) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (pairwise$a ?v0 ?v1) (less_eq$a ?v2 ?v1)) (pairwise$a ?v0 ?v2))) :named a195))
(assert (! (forall ((?v0 (-> Pname$ (-> Pname$ Bool))) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (pairwise$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (pairwise$ ?v0 ?v2))) :named a196))
(assert (! (forall ((?v0 (-> State_triple$ Bool)) (?v1 (-> State_triple$ Bool))) (= (less_eq$a (collect$a ?v0) (collect$a ?v1)) (forall ((?v2 State_triple$)) (=> (?v0 ?v2) (?v1 ?v2))))) :named a197))
(assert (! (forall ((?v0 (-> Pname$ Bool)) (?v1 (-> Pname$ Bool))) (= (less_eq$ (collect$ ?v0) (collect$ ?v1)) (forall ((?v2 Pname$)) (=> (?v0 ?v2) (?v1 ?v2))))) :named a198))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State_triple_set$ State_triple_set$)) (?v2 State_triple_set$) (?v3 State_triple_set$)) (=> (and (less_eq$a ?v0 (?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (?v1 ?v4) (?v1 ?v5)))))) (less_eq$a ?v0 (?v1 ?v3)))) :named a199))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> Pname_set$ State_triple_set$)) (?v2 Pname_set$) (?v3 Pname_set$)) (=> (and (less_eq$a ?v0 (?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$a (?v1 ?v4) (?v1 ?v5)))))) (less_eq$a ?v0 (?v1 ?v3)))) :named a200))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> State_triple_set$ Pname_set$)) (?v2 State_triple_set$) (?v3 State_triple_set$)) (=> (and (less_eq$ ?v0 (?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$ (?v1 ?v4) (?v1 ?v5)))))) (less_eq$ ?v0 (?v1 ?v3)))) :named a201))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> Pname_set$ Pname_set$)) (?v2 Pname_set$) (?v3 Pname_set$)) (=> (and (less_eq$ ?v0 (?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (?v1 ?v4) (?v1 ?v5)))))) (less_eq$ ?v0 (?v1 ?v3)))) :named a202))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ State_triple_set$)) (?v3 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$a (?v2 ?v1) ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (?v2 ?v4) (?v2 ?v5)))))) (less_eq$a (?v2 ?v0) ?v3))) :named a203))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ Pname_set$)) (?v3 Pname_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$ (?v2 ?v1) ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$ (?v2 ?v4) (?v2 ?v5)))))) (less_eq$ (?v2 ?v0) ?v3))) :named a204))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 (-> Pname_set$ State_triple_set$)) (?v3 State_triple_set$)) (=> (and (less_eq$ ?v0 ?v1) (and (less_eq$a (?v2 ?v1) ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$a (?v2 ?v4) (?v2 ?v5)))))) (less_eq$a (?v2 ?v0) ?v3))) :named a205))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 (-> Pname_set$ Pname_set$)) (?v3 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (and (less_eq$ (?v2 ?v1) ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (?v2 ?v4) (?v2 ?v5)))))) (less_eq$ (?v2 ?v0) ?v3))) :named a206))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State_triple_set$ State_triple_set$)) (?v2 State_triple_set$) (?v3 State_triple_set$)) (=> (and (= ?v0 (?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (?v1 ?v4) (?v1 ?v5)))))) (less_eq$a ?v0 (?v1 ?v3)))) :named a207))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> State_triple_set$ Pname_set$)) (?v2 State_triple_set$) (?v3 State_triple_set$)) (=> (and (= ?v0 (?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$ (?v1 ?v4) (?v1 ?v5)))))) (less_eq$ ?v0 (?v1 ?v3)))) :named a208))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> Pname_set$ State_triple_set$)) (?v2 Pname_set$) (?v3 Pname_set$)) (=> (and (= ?v0 (?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$a (?v1 ?v4) (?v1 ?v5)))))) (less_eq$a ?v0 (?v1 ?v3)))) :named a209))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> Pname_set$ Pname_set$)) (?v2 Pname_set$) (?v3 Pname_set$)) (=> (and (= ?v0 (?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (?v1 ?v4) (?v1 ?v5)))))) (less_eq$ ?v0 (?v1 ?v3)))) :named a210))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ State_triple_set$)) (?v3 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (?v2 ?v1) ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (?v2 ?v4) (?v2 ?v5)))))) (less_eq$a (?v2 ?v0) ?v3))) :named a211))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ Pname_set$)) (?v3 Pname_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (?v2 ?v1) ?v3) (forall ((?v4 State_triple_set$) (?v5 State_triple_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$ (?v2 ?v4) (?v2 ?v5)))))) (less_eq$ (?v2 ?v0) ?v3))) :named a212))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 (-> Pname_set$ State_triple_set$)) (?v3 State_triple_set$)) (=> (and (less_eq$ ?v0 ?v1) (and (= (?v2 ?v1) ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$a (?v2 ?v4) (?v2 ?v5)))))) (less_eq$a (?v2 ?v0) ?v3))) :named a213))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 (-> Pname_set$ Pname_set$)) (?v3 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (and (= (?v2 ?v1) ?v3) (forall ((?v4 Pname_set$) (?v5 Pname_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (?v2 ?v4) (?v2 ?v5)))))) (less_eq$ (?v2 ?v0) ?v3))) :named a214))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a215))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a216))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a217))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a218))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1))) :named a219))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a220))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a221))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a222))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (less_eq$a ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$a ?v1 ?v0)))) :named a223))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (less_eq$ ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$ ?v1 ?v0)))) :named a224))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (= ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a225))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (= ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a226))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (= ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a227))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (= ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a228))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a229))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a230))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2))) :named a231))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a232))
(assert (! (forall ((?v0 State_triple_set$)) (less_eq$a ?v0 ?v0)) :named a233))
(assert (! (forall ((?v0 Pname_set$)) (less_eq$ ?v0 ?v0)) :named a234))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v0)) (less_eq$a ?v2 ?v1))) :named a235))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v0)) (less_eq$ ?v2 ?v1))) :named a236))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v1 ?v0))) :named a237))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v1 ?v0))) :named a238))
(assert (! (forall ((?v0 (-> State_triple$ Bool))) (less_eq$b bot$b ?v0)) :named a239))
(assert (! (forall ((?v0 (-> Pname$ Bool))) (less_eq$c bot$d ?v0)) :named a240))
(assert (! (forall ((?v0 Pname_set$)) (less_eq$ bot$a ?v0)) :named a241))
(assert (! (forall ((?v0 State_triple_set$)) (less_eq$a bot$ ?v0)) :named a242))
(assert (! (forall ((?v0 (-> State_triple$ Bool))) (= (less_eq$b ?v0 bot$b) (= ?v0 bot$b))) :named a243))
(assert (! (forall ((?v0 (-> Pname$ Bool))) (= (less_eq$c ?v0 bot$d) (= ?v0 bot$d))) :named a244))
(assert (! (forall ((?v0 Pname_set$)) (= (less_eq$ ?v0 bot$a) (= ?v0 bot$a))) :named a245))
(assert (! (forall ((?v0 State_triple_set$)) (= (less_eq$a ?v0 bot$) (= ?v0 bot$))) :named a246))
(assert (! (forall ((?v0 (-> State_triple$ Bool))) (=> (less_eq$b ?v0 bot$b) (= ?v0 bot$b))) :named a247))
(assert (! (forall ((?v0 (-> Pname$ Bool))) (=> (less_eq$c ?v0 bot$d) (= ?v0 bot$d))) :named a248))
(assert (! (forall ((?v0 Pname_set$)) (=> (less_eq$ ?v0 bot$a) (= ?v0 bot$a))) :named a249))
(assert (! (forall ((?v0 State_triple_set$)) (=> (less_eq$a ?v0 bot$) (= ?v0 bot$))) :named a250))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (finite$a ?v1)) (finite$a ?v0))) :named a251))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (finite$ ?v1)) (finite$ ?v0))) :named a252))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (less_eq$a ?v0 ?v1) (not (finite$a ?v0))) (not (finite$a ?v1)))) :named a253))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (less_eq$ ?v0 ?v1) (not (finite$ ?v0))) (not (finite$ ?v1)))) :named a254))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (and (finite$a ?v0) (less_eq$a ?v1 ?v0)) (finite$a ?v1))) :named a255))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (finite$ ?v0) (less_eq$ ?v1 ?v0)) (finite$ ?v1))) :named a256))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ (insert$a ?v2 ?v0) (insert$a ?v2 ?v1)))) :named a257))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a (insert$ ?v2 ?v0) (insert$ ?v2 ?v1)))) :named a258))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (not (member$ ?v0 ?v1)) (= (less_eq$a ?v1 (insert$ ?v0 ?v2)) (less_eq$a ?v1 ?v2)))) :named a259))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (not (member$a ?v0 ?v1)) (= (less_eq$ ?v1 (insert$a ?v0 ?v2)) (less_eq$ ?v1 ?v2)))) :named a260))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (less_eq$ ?v0 (insert$a ?v1 ?v0))) :named a261))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (less_eq$a ?v0 (insert$ ?v1 ?v0))) :named a262))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (insert$a ?v2 ?v1)))) :named a263))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a ?v0 (insert$ ?v2 ?v1)))) :named a264))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (hoare_derivs$ ?v0 ?v1) (less_eq$a ?v0 ?v2)) (hoare_derivs$ ?v2 ?v1))) :named a265))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (less_eq$a ?v0 ?v1) (hoare_derivs$ ?v1 ?v0))) :named a266))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (hoare_derivs$ ?v0 ?v1) (less_eq$a ?v2 ?v1)) (hoare_derivs$ ?v0 ?v2))) :named a267))
(assert (! (forall ((?v0 (-> Pname$ (-> Pname$ Bool)))) (pairwise$ ?v0 bot$a)) :named a268))
(assert (! (forall ((?v0 (-> State_triple$ (-> State_triple$ Bool)))) (pairwise$a ?v0 bot$)) :named a269))
(assert (! (forall ((?v0 (-> State_triple$ (-> State_triple$ Bool))) (?v1 State_triple$) (?v2 State_triple_set$)) (= (pairwise$a ?v0 (insert$ ?v1 ?v2)) (and (forall ((?v3 State_triple$)) (=> (and (member$ ?v3 ?v2) (not (= ?v3 ?v1))) (and (?v0 ?v1 ?v3) (?v0 ?v3 ?v1)))) (pairwise$a ?v0 ?v2)))) :named a270))
(assert (! (forall ((?v0 (-> Pname$ (-> Pname$ Bool))) (?v1 Pname$) (?v2 Pname_set$)) (= (pairwise$ ?v0 (insert$a ?v1 ?v2)) (and (forall ((?v3 Pname$)) (=> (and (member$a ?v3 ?v2) (not (= ?v3 ?v1))) (and (?v0 ?v1 ?v3) (?v0 ?v3 ?v1)))) (pairwise$ ?v0 ?v2)))) :named a271))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (=> (less_eq$ ?v0 (insert$a ?v1 bot$a)) (or (= ?v0 bot$a) (= ?v0 (insert$a ?v1 bot$a))))) :named a272))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (=> (less_eq$a ?v0 (insert$ ?v1 bot$)) (or (= ?v0 bot$) (= ?v0 (insert$ ?v1 bot$))))) :named a273))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (= (less_eq$ ?v0 (insert$a ?v1 bot$a)) (or (= ?v0 bot$a) (= ?v0 (insert$a ?v1 bot$a))))) :named a274))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (= (less_eq$a ?v0 (insert$ ?v1 bot$)) (or (= ?v0 bot$) (= ?v0 (insert$ ?v1 bot$))))) :named a275))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$a ?v2 ?v1)) (less_eq$a (insert$ ?v0 ?v2) ?v1))) :named a276))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (insert$a ?v0 ?v2) ?v1))) :named a277))
(assert (! (forall ((?v0 Pname_set$)) (=> (forall ((?v1 Pname$)) (=> (member$a ?v1 ?v0) false)) (less_eq$ ?v0 bot$a))) :named a278))
(assert (! (forall ((?v0 State_triple_set$)) (=> (forall ((?v1 State_triple$)) (=> (member$ ?v1 ?v0) false)) (less_eq$a ?v0 bot$))) :named a279))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> Pname_set$ Bool))) (=> (and (finite$ ?v0) (and (?v1 bot$a) (forall ((?v2 Pname_set$)) (=> (and (finite$ ?v2) (and (not (= ?v2 bot$a)) (and (less_eq$ ?v2 ?v0) (forall ((?v3 Pname$)) (=> (member$a ?v3 ?v2) (?v1 (minus$ ?v2 (insert$a ?v3 bot$a)))))))) (?v1 ?v2))))) (?v1 ?v0))) :named a280))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State_triple_set$ Bool))) (=> (and (finite$a ?v0) (and (?v1 bot$) (forall ((?v2 State_triple_set$)) (=> (and (finite$a ?v2) (and (not (= ?v2 bot$)) (and (less_eq$a ?v2 ?v0) (forall ((?v3 State_triple$)) (=> (member$ ?v3 ?v2) (?v1 (minus$a ?v2 (insert$ ?v3 bot$)))))))) (?v1 ?v2))))) (?v1 ?v0))) :named a281))
(assert (! (forall ((?v0 (-> Pname_set$ Bool)) (?v1 Pname_set$)) (=> (and (?v0 bot$a) (and (=> (not (finite$ ?v1)) (?v0 ?v1)) (forall ((?v2 Pname_set$)) (=> (and (finite$ ?v2) (and (not (= ?v2 bot$a)) (and (less_eq$ ?v2 ?v1) (forall ((?v3 Pname$)) (=> (member$a ?v3 ?v2) (?v0 (minus$ ?v2 (insert$a ?v3 bot$a)))))))) (?v0 ?v2))))) (?v0 ?v1))) :named a282))
(assert (! (forall ((?v0 (-> State_triple_set$ Bool)) (?v1 State_triple_set$)) (=> (and (?v0 bot$) (and (=> (not (finite$a ?v1)) (?v0 ?v1)) (forall ((?v2 State_triple_set$)) (=> (and (finite$a ?v2) (and (not (= ?v2 bot$)) (and (less_eq$a ?v2 ?v1) (forall ((?v3 State_triple$)) (=> (member$ ?v3 ?v2) (?v0 (minus$a ?v2 (insert$ ?v3 bot$)))))))) (?v0 ?v2))))) (?v0 ?v1))) :named a283))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (= (less_eq$ ?v0 (uminus$ (insert$a ?v1 bot$a))) (not (member$a ?v1 ?v0)))) :named a284))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (= (less_eq$a ?v0 (uminus$a (insert$ ?v1 bot$))) (not (member$ ?v1 ?v0)))) :named a285))
(assert (! (forall ((?v0 (-> State_triple_set$ Bool)) (?v1 State_triple_set$) (?v2 (-> State_triple_set$ Bool))) (=> (and (?v0 ?v1) (and (forall ((?v3 State_triple_set$)) (=> (?v0 ?v3) (less_eq$a ?v3 ?v1))) (forall ((?v3 State_triple_set$)) (=> (and (?v0 ?v3) (forall ((?v4 State_triple_set$)) (=> (?v0 ?v4) (less_eq$a ?v4 ?v3)))) (?v2 ?v3))))) (?v2 (greatest$ ?v0)))) :named a286))
(assert (! (forall ((?v0 (-> Pname_set$ Bool)) (?v1 Pname_set$) (?v2 (-> Pname_set$ Bool))) (=> (and (?v0 ?v1) (and (forall ((?v3 Pname_set$)) (=> (?v0 ?v3) (less_eq$ ?v3 ?v1))) (forall ((?v3 Pname_set$)) (=> (and (?v0 ?v3) (forall ((?v4 Pname_set$)) (=> (?v0 ?v4) (less_eq$ ?v4 ?v3)))) (?v2 ?v3))))) (?v2 (greatest$a ?v0)))) :named a287))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (minus$a (minus$a ?v0 ?v1) ?v1) (minus$a ?v0 ?v1))) :named a288))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (minus$ (minus$ ?v0 ?v1) ?v1) (minus$ ?v0 ?v1))) :named a289))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (= (member$ ?v0 (minus$a ?v1 ?v2)) (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))))) :named a290))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (= (member$a ?v0 (minus$ ?v1 ?v2)) (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))))) :named a291))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))) (member$ ?v0 (minus$a ?v1 ?v2)))) :named a292))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))) (member$a ?v0 (minus$ ?v1 ?v2)))) :named a293))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (= (uminus$a ?v0) (uminus$a ?v1)) (= ?v0 ?v1))) :named a294))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (= (uminus$ ?v0) (uminus$ ?v1)) (= ?v0 ?v1))) :named a295))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (= (member$ ?v0 (uminus$a ?v1)) (not (member$ ?v0 ?v1)))) :named a296))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (= (member$a ?v0 (uminus$ ?v1)) (not (member$a ?v0 ?v1)))) :named a297))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (=> (=> (member$ ?v0 ?v1) false) (member$ ?v0 (uminus$a ?v1)))) :named a298))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (=> (=> (member$a ?v0 ?v1) false) (member$a ?v0 (uminus$ ?v1)))) :named a299))
(assert (! (forall ((?v0 Pname_set$)) (! (= (minus$ ?v0 ?v0) bot$a) :pattern ((minus$ ?v0)))) :named a300))
(assert (! (forall ((?v0 State_triple_set$)) (! (= (minus$a ?v0 ?v0) bot$) :pattern ((minus$a ?v0)))) :named a301))
(assert (! (forall ((?v0 Pname_set$)) (= (minus$ bot$a ?v0) bot$a)) :named a302))
(assert (! (forall ((?v0 State_triple_set$)) (= (minus$a bot$ ?v0) bot$)) :named a303))
(assert (! (forall ((?v0 Pname_set$)) (= (minus$ ?v0 bot$a) ?v0)) :named a304))
(assert (! (forall ((?v0 State_triple_set$)) (= (minus$a ?v0 bot$) ?v0)) :named a305))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (finite$a ?v0) (= (finite$a (minus$a ?v1 ?v0)) (finite$a ?v1)))) :named a306))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (finite$ ?v0) (= (finite$ (minus$ ?v1 ?v0)) (finite$ ?v1)))) :named a307))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (finite$a ?v0) (finite$a (minus$a ?v0 ?v1)))) :named a308))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (finite$ ?v0) (finite$ (minus$ ?v0 ?v1)))) :named a309))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (member$ ?v0 ?v1) (= (minus$a (insert$ ?v0 ?v2) ?v1) (minus$a ?v2 ?v1)))) :named a310))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (member$a ?v0 ?v1) (= (minus$ (insert$a ?v0 ?v2) ?v1) (minus$ ?v2 ?v1)))) :named a311))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (not (member$ ?v0 ?v1)) (= (minus$a ?v1 (insert$ ?v0 ?v2)) (minus$a ?v1 ?v2)))) :named a312))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (not (member$a ?v0 ?v1)) (= (minus$ ?v1 (insert$a ?v0 ?v2)) (minus$ ?v1 ?v2)))) :named a313))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (less_eq$a (uminus$a ?v0) (uminus$a ?v1)) (less_eq$a ?v1 ?v0))) :named a314))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (less_eq$ (uminus$ ?v0) (uminus$ ?v1)) (less_eq$ ?v1 ?v0))) :named a315))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a (uminus$a ?v1) (uminus$a ?v0)))) :named a316))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ (uminus$ ?v1) (uminus$ ?v0)))) :named a317))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (= (= (minus$ ?v0 ?v1) bot$a) (less_eq$ ?v0 ?v1))) :named a318))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$)) (= (= (minus$a ?v0 ?v1) bot$) (less_eq$a ?v0 ?v1))) :named a319))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (= (insert$a ?v0 (minus$ ?v1 (insert$a ?v0 bot$a))) (insert$a ?v0 ?v1))) :named a320))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (= (insert$ ?v0 (minus$a ?v1 (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a321))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (finite$a (minus$a ?v0 (insert$ ?v1 ?v2))) (finite$a (minus$a ?v0 ?v2)))) :named a322))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$) (?v2 Pname_set$)) (= (finite$ (minus$ ?v0 (insert$a ?v1 ?v2))) (finite$ (minus$ ?v0 ?v2)))) :named a323))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (= (uminus$ (insert$a ?v0 ?v1)) (minus$ (uminus$ ?v1) (insert$a ?v0 bot$a)))) :named a324))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (= (uminus$a (insert$ ?v0 ?v1)) (minus$a (uminus$a ?v1) (insert$ ?v0 bot$)))) :named a325))
(assert (! (forall ((?v0 State_triple_set$)) (= (uminus$a (uminus$a ?v0)) ?v0)) :named a326))
(assert (! (forall ((?v0 Pname_set$)) (= (uminus$ (uminus$ ?v0)) ?v0)) :named a327))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (and (member$ ?v0 (minus$a ?v1 ?v2)) (member$ ?v0 ?v2)) false)) :named a328))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (member$a ?v0 (minus$ ?v1 ?v2)) (member$a ?v0 ?v2)) false)) :named a329))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (=> (member$ ?v0 (minus$a ?v1 ?v2)) (member$ ?v0 ?v1))) :named a330))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (member$a ?v0 (minus$ ?v1 ?v2)) (member$a ?v0 ?v1))) :named a331))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (=> (member$a ?v0 (uminus$ ?v1)) (not (member$a ?v0 ?v1)))) :named a332))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (=> (and (member$a ?v0 (minus$ ?v1 ?v2)) (=> (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))) false)) false)) :named a333))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (and (finite$ ?v0) (not (finite$ ?v1))) (not (finite$ (minus$ ?v1 ?v0))))) :named a334))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$) (?v2 State_triple_set$)) (= (minus$a (insert$ ?v0 ?v1) ?v2) (ite (member$ ?v0 ?v2) (minus$a ?v1 ?v2) (insert$ ?v0 (minus$a ?v1 ?v2))))) :named a335))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$) (?v2 Pname_set$)) (= (minus$ (insert$a ?v0 ?v1) ?v2) (ite (member$a ?v0 ?v2) (minus$ ?v1 ?v2) (insert$a ?v0 (minus$ ?v1 ?v2))))) :named a336))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (=> (not (member$a ?v0 ?v1)) (= (minus$ (insert$a ?v0 ?v1) (insert$a ?v0 bot$a)) ?v1))) :named a337))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (=> (not (member$ ?v0 ?v1)) (= (minus$a (insert$ ?v0 ?v1) (insert$ ?v0 bot$)) ?v1))) :named a338))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (minus$a ?v0 (insert$ ?v1 ?v2)) (minus$a (minus$a ?v0 (insert$ ?v1 bot$)) ?v2))) :named a339))
(assert (! (forall ((?v0 Pname$) (?v1 Pname_set$)) (=> (member$a ?v0 ?v1) (= (insert$a ?v0 (minus$ ?v1 (insert$a ?v0 bot$a))) ?v1))) :named a340))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (=> (member$ ?v0 ?v1) (= (insert$ ?v0 (minus$a ?v1 (insert$ ?v0 bot$))) ?v1))) :named a341))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (minus$a ?v0 (insert$ ?v1 ?v2)) (minus$a (minus$a ?v0 ?v2) (insert$ ?v1 bot$)))) :named a342))
(assert (! (forall ((?v0 State_triple_set$)) (= (less_eq$a ?v0 (uminus$a ?v0)) (= ?v0 bot$))) :named a343))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple_set$) (?v2 State_triple$) (?v3 State_triple_set$)) (= (less_eq$a ?v0 (minus$a ?v1 (insert$ ?v2 ?v3))) (and (less_eq$a ?v0 (minus$a ?v1 ?v3)) (not (member$ ?v2 ?v0))))) :named a344))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$) (?v2 Pname$) (?v3 Pname_set$)) (= (less_eq$ ?v0 (minus$ ?v1 (insert$a ?v2 ?v3))) (and (less_eq$ ?v0 (minus$ ?v1 ?v3)) (not (member$a ?v2 ?v0))))) :named a345))
(assert (! (forall ((?v0 Pname_set$) (?v1 (-> Pname_set$ Bool))) (=> (and (finite$ ?v0) (and (?v1 ?v0) (forall ((?v2 Pname$) (?v3 Pname_set$)) (=> (and (finite$ ?v3) (and (member$a ?v2 ?v3) (?v1 ?v3))) (?v1 (minus$ ?v3 (insert$a ?v2 bot$a))))))) (?v1 bot$a))) :named a346))
(assert (! (forall ((?v0 State_triple_set$) (?v1 (-> State_triple_set$ Bool))) (=> (and (finite$a ?v0) (and (?v1 ?v0) (forall ((?v2 State_triple$) (?v3 State_triple_set$)) (=> (and (finite$a ?v3) (and (member$ ?v2 ?v3) (?v1 ?v3))) (?v1 (minus$a ?v3 (insert$ ?v2 bot$))))))) (?v1 bot$))) :named a347))
(assert (! (forall ((?v0 (-> Pname_set$ Bool)) (?v1 Pname_set$)) (=> (and (?v0 ?v1) (forall ((?v2 Pname_set$)) (=> (?v0 ?v2) (exists ((?v3 Pname$)) (and (member$a ?v3 ?v2) (or (?v0 (minus$ ?v2 (insert$a ?v3 bot$a))) (not (finite$ (minus$ ?v2 (insert$a ?v3 bot$a)))))))))) (not (finite$ ?v1)))) :named a348))
(assert (! (forall ((?v0 (-> State_triple_set$ Bool)) (?v1 State_triple_set$)) (=> (and (?v0 ?v1) (forall ((?v2 State_triple_set$)) (=> (?v0 ?v2) (exists ((?v3 State_triple$)) (and (member$ ?v3 ?v2) (or (?v0 (minus$a ?v2 (insert$ ?v3 bot$))) (not (finite$a (minus$a ?v2 (insert$ ?v3 bot$)))))))))) (not (finite$a ?v1)))) :named a349))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$)) (=> (not (finite$ ?v0)) (not (finite$ (minus$ ?v0 (insert$a ?v1 bot$a)))))) :named a350))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$)) (=> (not (finite$a ?v0)) (not (finite$a (minus$a ?v0 (insert$ ?v1 bot$)))))) :named a351))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (=> (less_eq$a (minus$a ?v0 (insert$ ?v1 bot$)) ?v2) (less_eq$a ?v0 (insert$ ?v1 ?v2)))) :named a352))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$) (?v2 Pname_set$)) (= (less_eq$ ?v0 (insert$a ?v1 ?v2)) (ite (member$a ?v1 ?v0) (less_eq$ (minus$ ?v0 (insert$a ?v1 bot$a)) ?v2) (less_eq$ ?v0 ?v2)))) :named a353))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (less_eq$a ?v0 (insert$ ?v1 ?v2)) (ite (member$ ?v1 ?v0) (less_eq$a (minus$a ?v0 (insert$ ?v1 bot$)) ?v2) (less_eq$a ?v0 ?v2)))) :named a354))
(assert (! (forall ((?v0 State_triple$) (?v1 State_triple_set$)) (! (= (remove$ ?v0 ?v1) (minus$a ?v1 (insert$ ?v0 bot$))) :pattern ((remove$ ?v0 ?v1)))) :named a355))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname$) (?v2 Pname_set$)) (= (less$ ?v0 (insert$a ?v1 ?v2)) (ite (member$a ?v1 ?v2) (less$ ?v0 ?v2) (ite (member$a ?v1 ?v0) (less$ (minus$ ?v0 (insert$a ?v1 bot$a)) ?v2) (less_eq$ ?v0 ?v2))))) :named a356))
(assert (! (forall ((?v0 State_triple_set$) (?v1 State_triple$) (?v2 State_triple_set$)) (= (less$a ?v0 (insert$ ?v1 ?v2)) (ite (member$ ?v1 ?v2) (less$a ?v0 ?v2) (ite (member$ ?v1 ?v0) (less$a (minus$a ?v0 (insert$ ?v1 bot$)) ?v2) (less_eq$a ?v0 ?v2))))) :named a357))
(assert (! (forall ((?v0 Pname$) (?v1 Pname$) (?v2 Pname_set$)) (= (member$a ?v0 (remove$a ?v1 ?v2)) (and (member$a ?v0 ?v2) (not (= ?v0 ?v1))))) :named a358))
(assert (! (forall ((?v0 Pname_set$) (?v1 Pname_set$)) (=> (less$ ?v0 ?v1) (exists ((?v2 Pname$)) (member$a ?v2 (minus$ ?v1 ?v0))))) :named a359))
(check-sat)
